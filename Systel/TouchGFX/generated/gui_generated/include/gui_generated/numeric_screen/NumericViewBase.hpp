/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef NUMERIC_VIEW_BASE_HPP
#define NUMERIC_VIEW_BASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/numeric_screen/NumericPresenter.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>

#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
class NumericViewBase : public touchgfx::View<NumericPresenter>
{
public:
    NumericViewBase();
    virtual ~NumericViewBase() {}

    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Container BackgroundContainer;
    touchgfx::TiledImage Background;
    touchgfx::Box Shadow_1;
    touchgfx::Line line1;
    touchgfx::PainterRGB888 line1Painter;

    touchgfx::Container TopBar;
    touchgfx::Image supcom1;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger > > NumericButton;


private:

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

    /*
     * Callback Declarations
     */
    touchgfx::Callback<NumericViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // NUMERIC_VIEW_BASE_HPP
